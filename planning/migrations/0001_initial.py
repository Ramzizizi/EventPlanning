# Generated by Django 5.0.2 on 2024-02-13 13:11

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("seat_capacity", models.IntegerField(default=0)),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("username", models.TextField(max_length=255, unique=True)),
                (
                    "email",
                    models.EmailField(
                        max_length=255, unique=True, verbose_name="email address"
                    ),
                ),
                ("date_of_birth", models.DateField()),
                ("is_admin", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="MeetingRoom",
            fields=[
                (
                    "place_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="planning.place",
                    ),
                ),
                ("mico_count", models.IntegerField(default=0)),
                ("projects_count", models.IntegerField(default=0)),
                ("entrances_count", models.IntegerField(default=0)),
            ],
            bases=("planning.place",),
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "place_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="planning.place",
                    ),
                ),
                ("sofa_count", models.IntegerField(default=0)),
                ("seat_count", models.IntegerField(default=0)),
            ],
            bases=("planning.place",),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("event_capacity", models.IntegerField(default=0)),
                (
                    "start",
                    models.DateTimeField(verbose_name="Start event date and time"),
                ),
                ("end", models.DateTimeField(verbose_name="End event date and time")),
                (
                    "event_status",
                    models.IntegerField(
                        choices=[
                            (1, "Pastevent"),
                            (2, "Currentevent"),
                            (3, "Upcomingevent"),
                        ],
                        default=3,
                    ),
                ),
                (
                    "organizer",
                    models.OneToOneField(
                        editable=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="Organizer",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "visitors",
                    models.ManyToManyField(
                        editable=False,
                        related_name="Visitor",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "meeting_room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="planning.meetingroom",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="planning.room",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("meeting_room__isnull", False), ("room__isnull", True)),
                    models.Q(("meeting_room__isnull", True), ("room__isnull", False)),
                    _connector="OR",
                ),
                name="planning_event_room_or_meeting_room",
            ),
        ),
        migrations.AddConstraint(
            model_name="event",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("end__isnull", False), ("start__isnull", True)),
                    models.Q(("end__isnull", False), ("start__isnull", False)),
                    models.Q(("end__isnull", True), ("start__isnull", False)),
                    _connector="OR",
                ),
                name="planning_event_start_or_end_time",
            ),
        ),
    ]
